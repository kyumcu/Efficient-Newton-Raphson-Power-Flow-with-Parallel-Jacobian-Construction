#pragma once

template<typename T, typename U>
class Device
{
public:
  // Constructor and Destructor
  Device() = default;
  virtual ~Device() {}

  // Virtual methods for device-specific behavior
  virtual void update(U timestep) = 0; // Update the state for the given timestep
  virtual void initialize() = 0;       // Initialize device-specific properties

  // Common utility methods for all devices
  virtual T getPower() const = 0; // Calculate and return the power consumed or
                                  // generated by the device

protected:
  // Common attributes shared by all devices
  bool _isInitialized = false; // Flag to check if the device is initialized
};